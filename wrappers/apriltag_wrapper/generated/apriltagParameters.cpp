/**
 * \file apriltagParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 * Generated from apriltag.xml
 */

#include <vector>
#include <stddef.h>
#include "apriltagParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
#if 0
template<>
Reflection BaseReflection<ApriltagParameters>::reflection = Reflection();
template<>
int BaseReflection<ApriltagParameters>::dummy = ApriltagParameters::staticInit();
#endif
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN


using namespace corecvs;

int ApriltagParameters::staticInit(corecvs::Reflection *toFill)
{
    if (toFill == NULL || toFill->objectSize != 0) {
        SYNC_PRINT(("staticInit(): Contract Violation in <ApriltagParameters>\n"));
         return -1;
    }

    toFill->name = ReflectionNaming(
        "Apriltag Parameters",
        "Apriltag Parameters",
        ""
    );

     toFill->objectSize = sizeof(ApriltagParameters);
     

    StringField* field0 = new StringField
        (
          ApriltagParameters::TAG_FAMILY_ID,
          offsetof(ApriltagParameters, mTag_family),
          "tag36h11",
          "tag_family",
          "tag_family",
          "tag_family"
        );
    toFill->fields.push_back(field0);
    /*  */ 
    IntField* field1 = new IntField
        (
          ApriltagParameters::AT_THREADS_ID,
          offsetof(ApriltagParameters, mAt_threads),
          1,
          "at_threads",
          "at_threads",
          "at_threads"
        );
    toFill->fields.push_back(field1);
    /*  */ 
    BoolField* field2 = new BoolField
        (
          ApriltagParameters::AT_DEBUG_ID,
          offsetof(ApriltagParameters, mAt_debug),
          true,
          "at_debug",
          "at_debug",
          "at_debug"
        );
    field2->widgetHint=BaseField::CHECK_BOX;
    toFill->fields.push_back(field2);
    /*  */ 
    BoolField* field3 = new BoolField
        (
          ApriltagParameters::AT_QUIET_ID,
          offsetof(ApriltagParameters, mAt_quiet),
          false,
          "at_quiet",
          "at_quiet",
          "at_quiet"
        );
    field3->widgetHint=BaseField::CHECK_BOX;
    toFill->fields.push_back(field3);
    /*  */ 
    BoolField* field4 = new BoolField
        (
          ApriltagParameters::AT_REFINE_EDGES_ID,
          offsetof(ApriltagParameters, mAt_refine_edges),
          true,
          "at_refine_edges",
          "at_refine_edges",
          "at_refine_edges"
        );
    field4->widgetHint=BaseField::CHECK_BOX;
    toFill->fields.push_back(field4);
    /*  */ 
    DoubleField* field5 = new DoubleField
        (
          ApriltagParameters::AT_DECIMATE_ID,
          offsetof(ApriltagParameters, mAt_decimate),
          2,
          "at_decimate",
          "at_decimate",
          "at_decimate"
        );
    field5->widgetHint=BaseField::SPIN_BOX;
    field5->precision=2;
    toFill->fields.push_back(field5);
    /*  */ 
    DoubleField* field6 = new DoubleField
        (
          ApriltagParameters::BLUR_ID,
          offsetof(ApriltagParameters, mBlur),
          0,
          "blur",
          "blur",
          "blur"
        );
    field6->widgetHint=BaseField::SPIN_BOX;
    field6->precision=2;
    toFill->fields.push_back(field6);
    /*  */ 
    ReflectionDirectory &directory = *ReflectionDirectoryHolder::getReflectionDirectory();
    directory[std::string("Apriltag Parameters")]= toFill;
   return 0;
}
int ApriltagParameters::relinkCompositeFields()
{
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


